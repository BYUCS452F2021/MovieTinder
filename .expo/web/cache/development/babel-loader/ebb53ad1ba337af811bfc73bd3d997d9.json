{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar retrieveGenreList = function retrieveGenreList() {\n  var genresArray;\n  return _regeneratorRuntime.async(function retrieveGenreList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=\" + (process && process.env && process.env.EXPO_API_KEY || \"9a22f338e6bbd4d16c516a53f9607b07\") + \"&language=en-US\").then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data.genres ? data.genres : [];\n          }));\n\n        case 3:\n          genresArray = _context.sent;\n          return _context.abrupt(\"return\", {\n            success: true,\n            genres: genresArray\n          });\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", {\n            success: false,\n            errorMsg: _context.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar retrieveMovieListWithSelections = function retrieveMovieListWithSelections(movieGroupSettings) {\n  var genreString, genreArr, i, movieList;\n  return _regeneratorRuntime.async(function retrieveMovieListWithSelections$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          genreString = '';\n          genreArr = movieGroupSettings.genres;\n\n          for (i = 0; i < genreArr.length; i++) {\n            console.log(genreArr[i].id, genreArr[i].name);\n            genreString = genreString + genreArr[i].id + '|';\n          }\n\n          genreString.slice(0, 1);\n          _context2.prev = 4;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + (process && process.env && process.env.EXPO_API_KEY || \"9a22f338e6bbd4d16c516a53f9607b07\") + \"&language=en-US&sort_by=popularity.desc&include_video=false&page=2&release_date.gte=2000-01-01&release_date.lte=2018-12-31&with_genres=\" + genreString + \"&with_original_language=en\").then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data.results;\n          }));\n\n        case 7:\n          movieList = _context2.sent;\n          console.log(\"MOVIE LIST\", movieList);\n          return _context2.abrupt(\"return\", {\n            success: true,\n            movies: movieList\n          });\n\n        case 12:\n          _context2.prev = 12;\n          _context2.t0 = _context2[\"catch\"](4);\n          return _context2.abrupt(\"return\", {\n            success: false,\n            errorMsg: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[4, 12]], Promise);\n};\n\nvar retrieveWatchProviders = function retrieveWatchProviders(movieID) {\n  var watchProvidersList;\n  return _regeneratorRuntime.async(function retrieveWatchProviders$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://api.themoviedb.org/3/movie/\" + movieID + \"/watch/providers?api_key=\" + (process && process.env && process.env.EXPO_API_KEY || \"9a22f338e6bbd4d16c516a53f9607b07\")).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data.results['US']['flatrate'][0]['provider_name'];\n          }));\n\n        case 3:\n          watchProvidersList = _context3.sent;\n          return _context3.abrupt(\"return\", {\n            success: true,\n            watchProviders: watchProvidersList\n          });\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          return _context3.abrupt(\"return\", {\n            success: false,\n            errorMsg: _context3.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nexport { retrieveGenreList, retrieveMovieListWithSelections, retrieveWatchProviders };","map":{"version":3,"sources":["/Users/ammonwarnick/Desktop/MovieTinder/repositories/movieDbRepository.js"],"names":["retrieveGenreList","fetch","then","response","json","data","genres","genresArray","success","errorMsg","retrieveMovieListWithSelections","movieGroupSettings","genreString","genreArr","i","length","console","log","id","name","slice","results","movieList","movies","retrieveWatchProviders","movieID","watchProvidersList","watchProviders"],"mappings":"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","sourcesContent":["const retrieveGenreList = async () => {\t\n\ttry {\n\t\tconst genresArray = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.EXPO_API_KEY}&language=en-US`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => data.genres ? data.genres : []);\n\t\treturn { success: true, genres: genresArray };\n\t} catch (error) {\n\t\treturn { success: false, errorMsg: error };\n\t}\n};\n\nconst retrieveMovieListWithSelections = async (movieGroupSettings) => {\n\tlet genreString = ''\n\tlet genreArr = movieGroupSettings.genres;\n\tfor(let i = 0; i < genreArr.length; i++) {\n\t\tconsole.log(genreArr[i].id, genreArr[i].name)\n\t\tgenreString = genreString + genreArr[i].id + '|'\n\t}\n\tgenreString.slice(0, 1);\n\ttry {\n\t\tconst movieList = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.EXPO_API_KEY}&language=en-US&sort_by=popularity.desc&include_video=false&page=2&release_date.gte=2000-01-01&release_date.lte=2018-12-31&with_genres=${genreString}&with_original_language=en`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => data.results);\n\t\t\tconsole.log(\"MOVIE LIST\", movieList);\n\t\treturn {success: true, movies: movieList};\n\t} catch (error) {\n\t\treturn {success: false, errorMsg: error}\n\t}\n};\n\nconst retrieveWatchProviders = async (movieID) => {\n\ttry {\n\t\tconst watchProvidersList = await fetch(`https://api.themoviedb.org/3/movie/${movieID}/watch/providers?api_key=${process.env.EXPO_API_KEY}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => (data.results['US']['flatrate'][0]['provider_name']));\n\t\treturn {success: true, watchProviders: watchProvidersList};\n\t} catch (error) {\n\t\treturn {success: false, errorMsg: error}\n\t}\n};\n\nexport { retrieveGenreList, retrieveMovieListWithSelections, retrieveWatchProviders };"]},"metadata":{},"sourceType":"module"}