{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/ammonwarnick/Desktop/MovieTinder/App.js\";\nimport React, { useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport AppLoading from 'expo-app-loading';\nimport shortid from 'shortid';\nimport { JoinScreen } from \"./screens/JoinScreen\";\nimport { MainScreen } from \"./screens/MainScreen\";\nimport { HostScreen } from \"./screens/HostScreen\";\nimport { ResultsScreen } from \"./screens/ResultsScreen\";\nimport { SwipeScreen } from \"./screens/SwipeScreen\";\nimport { SettingsScreen } from \"./screens/SettingsScreen\";\nimport { WaitScreen } from \"./screens/WaitScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  var loadResourcesAsync = function loadResourcesAsync() {\n    var userSettings, newUserSettings;\n    return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('@movieTinder:userSettings'));\n\n          case 2:\n            userSettings = _context.sent;\n\n            if (!(userSettings === null)) {\n              _context.next = 7;\n              break;\n            }\n\n            newUserSettings = {\n              userId: \"USER-\" + shortid.generate(),\n              colorScheme: 'Dark',\n              host: false\n            };\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@movieTinder:userSettings', JSON.stringify(newUserSettings)));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleFinishLoading = function handleFinishLoading() {\n    setTimeout(function () {\n      setLoadingComplete(true);\n    }, 1000);\n  };\n\n  var InAppStack = createStackNavigator();\n\n  var InAppStackNav = function InAppStackNav() {\n    return React.createElement(InAppStack.Navigator, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 4\n      }\n    }, React.createElement(InAppStack.Screen, {\n      options: {\n        headerShown: false\n      },\n      name: \"MainScreen\",\n      component: MainScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      options: {\n        headerShown: false\n      },\n      name: \"HostScreen\",\n      component: HostScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      options: {\n        headerShown: false\n      },\n      name: \"JoinScreen\",\n      component: JoinScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      name: \"ResultsScreen\",\n      component: ResultsScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      options: {\n        headerShown: false\n      },\n      name: \"SettingsScreen\",\n      component: SettingsScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      name: \"SwipeScreen\",\n      component: SwipeScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }), React.createElement(InAppStack.Screen, {\n      name: \"WaitScreen\",\n      component: WaitScreen,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }));\n  };\n\n  var Tab = createBottomTabNavigator();\n\n  if (!isLoadingComplete) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }\n    }, React.createElement(ActivityIndicator, {\n      style: {\n        marginTop: '50%'\n      },\n      size: \"large\",\n      color: \"#000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }), React.createElement(AppLoading, {\n      onError: function onError(error) {\n        return console.log(error);\n      },\n      startAsync: loadResourcesAsync,\n      onFinish: function onFinish() {\n        return handleFinishLoading();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }));\n  } else {\n    return React.createElement(SafeAreaView, {\n      style: {\n        flex: 1,\n        backgroundColor: '#ffffff'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 4\n      }\n    }, React.createElement(NavigationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, React.createElement(Tab.Navigator, {\n      initialRouteName: \"MainScreen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    }, React.createElement(Tab.Screen, {\n      options: {\n        tabBarVisible: false\n      },\n      name: \"InApp\",\n      component: InAppStackNav,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }))));\n  }\n}","map":{"version":3,"sources":["/Users/ammonwarnick/Desktop/MovieTinder/App.js"],"names":["React","useState","AsyncStorage","AppLoading","shortid","JoinScreen","MainScreen","HostScreen","ResultsScreen","SwipeScreen","SettingsScreen","WaitScreen","NavigationContainer","createStackNavigator","createBottomTabNavigator","App","isLoadingComplete","setLoadingComplete","loadResourcesAsync","getItem","userSettings","newUserSettings","userId","generate","colorScheme","host","setItem","JSON","stringify","handleFinishLoading","setTimeout","InAppStack","InAppStackNav","headerShown","Tab","marginTop","error","console","log","flex","backgroundColor","tabBarVisible"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ActivityIndicator, SafeAreaView, View, Text } from 'react-native';\nimport AsyncStorage from '@react-native-community/async-storage';\nimport AppLoading from 'expo-app-loading';\nimport shortid from 'shortid';\n\nimport { JoinScreen } from './screens/JoinScreen';\nimport { MainScreen } from './screens/MainScreen';\nimport { HostScreen } from './screens/HostScreen';\nimport { ResultsScreen } from './screens/ResultsScreen';\nimport { SwipeScreen } from './screens/SwipeScreen';\nimport { SettingsScreen } from './screens/SettingsScreen';\nimport { WaitScreen } from './screens/WaitScreen';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nexport default function App() {\n\tconst [isLoadingComplete, setLoadingComplete] = useState(false);\n\n\tconst loadResourcesAsync = async () => {\n\t\t// Add userSettings to local storage if they dont have an stored already.\n\t\tconst userSettings = await AsyncStorage.getItem('@movieTinder:userSettings');\n\t\tif (userSettings === null) {\n\t\t\tconst newUserSettings = {\n\t\t\t\tuserId: `USER-${shortid.generate()}`,\n\t\t\t\tcolorScheme: 'Dark',\n\t\t\t\thost: false,\n\t\t\t\t// Can add other properties here\n\t\t\t};\n\n\t\t\tawait AsyncStorage.setItem('@movieTinder:userSettings', JSON.stringify(newUserSettings));\n\t\t}\n\t\t// AsyncStorage.clear(); //<-- this will nuke local storage. don't run this unless you want to delete ALL the user's stuff.\n\t};\n\n\tconst handleFinishLoading = () => {\n\t\tsetTimeout(() => {\n\t\t\tsetLoadingComplete(true);\n\t\t}, 1000);\n\t};\n\n\tconst InAppStack = createStackNavigator();\n\n\tconst InAppStackNav = () => {\n\t\treturn (\n\t\t\t<InAppStack.Navigator>\n\t\t\t\t<InAppStack.Screen\n\t\t\t\t\toptions={{\n\t\t\t\t\t\theaderShown: false,\n\t\t\t\t\t\t// headerTitle: () => <MyComp />,\n\t\t\t\t\t\t// headerTintColor: '#000000',\n\t\t\t\t\t\t// headerBackTitle: 'Back'\n\t\t\t\t\t}}\n\t\t\t\t\tname='MainScreen'\n\t\t\t\t\tcomponent={MainScreen}\n\t\t\t\t/>\n\t\t\t\t<InAppStack.Screen\n\t\t\t\t\toptions={{\n\t\t\t\t\t\theaderShown: false,\n\t\t\t\t\t}}\n\t\t\t\t\tname='HostScreen'\n\t\t\t\t\tcomponent={HostScreen}\n\t\t\t\t/>\n\t\t\t\t<InAppStack.Screen options={{ headerShown: false }} name='JoinScreen' component={JoinScreen} />\n\t\t\t\t<InAppStack.Screen name='ResultsScreen' component={ResultsScreen} />\n\t\t\t\t<InAppStack.Screen\n\t\t\t\t\toptions={{\n\t\t\t\t\t\theaderShown: false,\n\t\t\t\t\t}}\n\t\t\t\t\tname='SettingsScreen'\n\t\t\t\t\tcomponent={SettingsScreen}\n\t\t\t\t/>\n\t\t\t\t<InAppStack.Screen name='SwipeScreen' component={SwipeScreen} />\n\t\t\t\t<InAppStack.Screen name='WaitScreen' component={WaitScreen} />\n\t\t\t</InAppStack.Navigator>\n\t\t);\n\t};\n\n\tconst Tab = createBottomTabNavigator();\n\n\tif (!isLoadingComplete) {\n\t\treturn (\n\t\t\t<View>\n\t\t\t\t<ActivityIndicator style={{ marginTop: '50%' }} size='large' color='#000000' />\n\t\t\t\t<AppLoading onError={error => console.log(error)} startAsync={loadResourcesAsync} onFinish={() => handleFinishLoading()} />\n\t\t\t</View>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<SafeAreaView style={{ flex: 1, backgroundColor: '#ffffff' }}>\n\t\t\t\t<NavigationContainer>\n\t\t\t\t\t<Tab.Navigator initialRouteName='MainScreen'>\n\t\t\t\t\t\t<Tab.Screen\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\ttabBarVisible: false,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tname='InApp'\n\t\t\t\t\t\t\tcomponent={InAppStackNav}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Tab.Navigator>\n\t\t\t\t</NavigationContainer>\n\t\t\t</SafeAreaView>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}